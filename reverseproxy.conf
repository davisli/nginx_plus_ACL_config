upstream backend_server{
  
server 192.168.10.14:8080; #IP address of backend server
}


server{
    listen 8080 ssl;
    ssl_certificate /etc/nginx/conf.d/ssl/nginx.crt; #cert on nginx
    ssl_certificate_key /etc/nginx/conf.d/ssl/nginx.key; #key on nginx
    ssl_protocols TLSv1.3 TLSv1.2 TLSv1.1; #You may remove versions you don't want
    ssl_prefer_server_ciphers on;

    location /admin { #Path for login page. 
    allow 192.168.10.22; #Simulate Internal Client allowed access. 
    deny all; #Deny login page access for ALL other IP Addr. Security folks wanted this line "to be sure".
    proxy_pass https://backend_server/admin; #NGINX is reverse proxy, we pass the traffic to backend.

    #Below is to allow backend server to record details of the real client. Otherwise, all requests will be seen as coming from NGINX only.
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #Allow backend to trace back origin request.
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header Upgrade $http_upgrade; #Converts the proxied connection to type Upgrade. WebSockets only communicate on Upgraded connections.
    proxy_set_header Connection "upgrade"; #Ensures Connection header value is upgrade

    }

    location /api { #No deny statements unless needed.
    allow 192.168.10.22;
    allow 192.168.10.7; #Allow Firewall-NAT-ed 4G IP Addresses to reduce scope of whitelist
    deny all;
    proxy_pass https://backend_server/api; #https means we are expecting SSL traffic between nginx and backend. Set up cert/key in your backend.


    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    }

}
